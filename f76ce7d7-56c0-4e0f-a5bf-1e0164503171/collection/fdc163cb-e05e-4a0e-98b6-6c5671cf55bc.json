{"info":{"_postman_id":"fdc163cb-e05e-4a0e-98b6-6c5671cf55bc","name":"*API 103: Building Applications with APIs","description":"# API 103: Building Applications with APIs\n\nThis collection is a companion to the Postman Classroom Program workshop **API 103: Building Applications with APIs**.\n\nSee the [**lesson video**](https://www.loom.com/share/e544583101954eb58f6ac3403ffac0b4).\n([slides](https://docs.google.com/presentation/d/19LajaxfzAyzXK0Uqa08iG5DBhqnPh0Zw-F67XejNJvk/edit#slide=id.gce40b160df_0_91))\n\n## What you will learn\n\n*   Use Glitch as a free web server for your app\n*   Build a web app using Node/Express, HTML and JavaScript\n*   Translate workflows into code\n*   Debug apps with Postman\n    \n\n## Resources\n\n*   [Demo (code)](https://glitch.com/edit/#!/spotify-song-recommender-complete?path=README.md:13:69)\n*   [Demo (try!)](https://spotify-song-recommender-complete.glitch.me/)\n*   [Glitch](https://glitch.com/)\n*   [Postman Express Starter (Glitch)](https://glitch.com/edit/#!/postman-express-starter)\n*   [Express documentation](https://expressjs.com/)\n*   [Generating code in Postman](https://learning.postman.com/docs/sending-requests/generate-code-snippets/)\n    \n\n## Getting Started\n\n1.  Fork this collection to your own workspace\n2.  Complete the mission in `your turn!`\n    \n\n## Submitting your work\n\nOnce you've finished mission in `your turn!` mission, follow the instructions on the `submit` folder","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"},"item":[{"name":"demo (complete)","item":[{"name":"check frontend","event":[{"listen":"test","script":{"id":"748b62b8-a8bd-4e2a-981f-8157c8c75388","exec":["const $ = cheerio.load(pm.response.text()) ","","const inputs = $('input').toArray()","","const trackInput = inputs.filter(i => i.attribs.name && !!i.attribs.name.match(/^track$/))","const artistInput = inputs.filter(i => i.attribs.name && !!i.attribs.name.match(/^artist$/))","const submitInputs = inputs.filter(i => i.attribs.type === 'submit')","","pm.test(\"Form has an input for track name\", () => {","  pm.expect(trackInput).to.have.length(1)","})","","pm.test(\"Form has an input for artist name\", () => {","  pm.expect(artistInput).to.have.length(1)","})","","pm.test(\"Form has a submit input\", () => {","  pm.expect(submitInputs).to.have.length(1)","})",""],"type":"text/javascript"}}],"id":"61e1f422-a7bc-44a3-ab24-0bccbe6065db","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"url":{"raw":"https://spotify-song-recommender-complete.glitch.me/","protocol":"https","host":["spotify-song-recommender-complete","glitch","me"],"path":[""]},"description":"## Checking frontend code\n\nThis request checks our homepage to make sure the proper inputs on our form exist"},"response":[]},{"name":"check /recommendations","id":"8e52e792-593b-462b-9b10-b3bd363cd2d1","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\n    \"track\": \"dancing queen\",\n    \"artist\": \"abba\"\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"https://spotify-song-recommender-complete.glitch.me/recommendations","protocol":"https","host":["spotify-song-recommender-complete","glitch","me"],"path":["recommendations"]},"description":"## Debugging the backend\n\nWe can test our Glitch server `POST /recommendations` route by making requests in Postman.\n\nThis request is making a call to our completed glitch demo app: [code](https://glitch.com/edit/#!/spotify-song-recommender-complete?path=server.js%3A1%3A0), [app](https://spotify-song-recommender-complete.glitch.me/)\n\nWe send a POST request body with a track and artist, and our Glitch server completes a workflow to send back song recommendations."},"response":[]}],"id":"ed4df8ab-6155-44ef-985a-512396950712","description":"## Demo\n\nThis folder gathers the completed materials covered in the lecture. \n\nCompleted Glitch app: \n- [code](https://glitch.com/edit/#!/spotify-song-recommender-complete?path=server.js%3A1%3A0) \n- [try!](https://spotify-song-recommender-complete.glitch.me/)\n\n## Mission \n\nThe blogger loved the Postman workflow for getting song recommendations and now wants a web app version to add as a page on his blog for his fans! \n\nIn this demo, we converted the workflow from API 102 into code on Glitch with the help of Postman's [code generating](https://learning.postman.com/docs/sending-requests/generate-code-snippets/) feature"},{"name":"your turn!","item":[{"name":"check your app","item":[{"name":"check /","event":[{"listen":"test","script":{"id":"124a1998-21a0-40e9-9f29-6d2a92944cef","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","","const $ = cheerio.load(pm.response.text()) ","","const inputs = $('input').toArray()","","const artistInputs = inputs.filter(i => i.attribs.name && !!i.attribs.name.match(/artist/))","const submitInputs = inputs.filter(i => i.attribs.type === 'submit')","","pm.test(\"Form has three text inputs for artists (names = artist1, artist2, artist3)\", () => {","  pm.expect(artistInputs).to.have.length(3)","})","","pm.test(\"Form has a submit input\", () => {","  pm.expect(submitInputs).to.have.length(1)","})",""],"type":"text/javascript"}}],"id":"c11e49ba-7ce7-45c2-838b-22b46e8411b9","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"url":{"raw":"{{YOUR_GLITCH_BASE_URL}}/","host":["{{YOUR_GLITCH_BASE_URL}}"],"path":[""]},"description":"## Check your web page form\nFirst, set the collection variable `YOUR_GLITCH_BASE_URL` to the value of your public Glitch url \n\nex: `https://my-app.glitch.me`\n\n> You can find your public Glitch url from the Glitch editor: **Show** > **In New Window** and copy the URL\n\n\nSend this request to check that you've updated  the index.html form to take 3 artists as inputs in your web page"},"response":[]},{"name":"check /script.js","event":[{"listen":"test","script":{"id":"124a1998-21a0-40e9-9f29-6d2a92944cef","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","","const script = pm.response.text()","","pm.test(\"Gets top five recommendations using `.slice(0,5)`\", () => {","    const sliceRegex = /\\.slice\\(\\s*0\\s*,\\s*5\\s*\\)/","    pm.expect(script).to.match(sliceRegex)","})","","pm.test(\"Includes a handlebars template for iterating over recommendations with {{#each ...}}{{/each}}\", () => {","    pm.expect(script).to.match(/{{\\s*#each/)","    pm.expect(script).to.match(/{{\\s*\\/each/)","})","","pm.test(\"Injects a rendered template into the DOM using `.innerHTML =`\", () => {","    pm.expect(script).to.match(/\\.innerHTML\\s*=\\s*\\w/)","})","",""],"type":"text/javascript"}}],"id":"6560274f-255d-4cb9-ac84-e92e731c072b","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"url":{"raw":"{{YOUR_GLITCH_BASE_URL}}/script.js","host":["{{YOUR_GLITCH_BASE_URL}}"],"path":["script.js"]},"description":"First, set the collection variable `YOUR_GLITCH_BASE_URL` to the value of your public Glitch url \n(ex: `https://my-app.glitch.me`)\n\n> You can find your public Glitch url from the Glitch editor: **Show** > **In New Window** and copy the URL\n\n\nSend this request to check that you've updated  the index.html form to take 3 artists as inputs in your *frontend (the part of your app that shows up in the browse)"},"response":[]},{"name":"check /recommendations","event":[{"listen":"test","script":{"id":"38c34b7f-3c0e-417f-94b6-b444a03d629c","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","","const body = pm.response.json()","","pm.test(\"Returns an object with a list of recommended tracks { \\\"tracks\\\": [ ... ]  }\", function () {","    pm.expect(Array.isArray(body.tracks)).to.eql(true);","});","","const req = pm.request","","pm.test(\"Request body inlcudes three artists (artist1, artist2, artist3)\", function () {","    const reqBody = JSON.parse(req.body.raw)","    pm.expect(reqBody).to.haveOwnProperty('artist1')","    pm.expect(reqBody).to.haveOwnProperty('artist2')","    pm.expect(reqBody).to.haveOwnProperty('artist3')","})"],"type":"text/javascript"}}],"id":"208d3943-56ac-4170-909b-bc77869e21b3","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\n    \"artist1\": \"nirvana\",\n    \"artist2\": \"led zeppelin\",\n    \"artist3\": \"pink floyd\"\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"{{YOUR_GLITCH_BASE_URL}}/recommendations","host":["{{YOUR_GLITCH_BASE_URL}}"],"path":["recommendations"]},"description":"You can use this request to test your `/recommendations` endpoint in `server.js` as you update the code. \n\nSet your project's public Glitch URL as a collection variable called `YOUR_GLITCH_BASE_URL`. You find your public url in Glitch from the editor: **Show** > **Open in New Window**\n\nYour endpoint should accept 3 artists in the request body (`artist1`, `artist2`, `artist3`) and return song recommendations. \n\nThe tests in the `Tests` tab of this request ensure your endpoint is working, so make sure the tests pass!\n\n## Next step\n\nOnce this request passes all the tests in the `Test Results` tab, and you have finished your Glitch frontend, you are ready to submit your work! \n\nClick the `submit` request in the `submit` folder below for instructions."},"response":[]}],"id":"1d8ebcee-4904-4f4e-91ca-0b4956eb99bf","description":"Postman can be a useful debugging tool while you develop applications - especially for testing APIs!\n\nUse the `check frontend` request to make sure you have correctly updated your html form\n\nUse the `check /recommendations` to check your work as you develop the `/recommendations` endpoint in `server.js`\n\nOnce all the Test Results in these two requests pass, you are ready to move onto the `submit` folder to submit your work"},{"name":"submit","item":[{"name":"submit","event":[{"listen":"test","script":{"id":"d16748f7-c802-491b-9012-0b01af64f526","exec":["// DO NOT EDIT THESE TESTS. They ensure you have completed the assignment and send data to your instructor.","","// counter for passed tests","let passed = 0","let totalToPass = 4","","pm.test(\"Status code 200 from Postman API\", function () {","    pm.response.to.have.status(200);","    passed++","});","","const studentEmail = pm.environment.get(\"studentEmail\");","const postmanApiKey = pm.environment.get(\"postman-api-key\");","","const glitchBaseUrl = pm.collectionVariables.get(\"YOUR_GLITCH_BASE_URL\");","","pm.test(\"postman-api-key' is set as an active environment variable\", function () {","    const cond = !!postmanApiKey","    pm.expect(cond).to.eql(true);","    passed++","});","","pm.test(\"'YOUR_GLITCH_BASE_URL' is set as a collection variable\", function () {","    const cond = !!glitchBaseUrl","    pm.expect(cond).to.eql(true);","    passed++","});","","const body = pm.response.json()","","pm.test(\"'your turn! > check your app' contains at least three requests\", function () {","    const checkAppReqs = body.collection","       .item.filter(i => i.name === 'your turn!')[0]","       .item.filter(i => i.name === 'check your app')[0]","    pm.expect(checkAppReqs.item).to.have.lengthOf.at.least(3);","    passed++","});","","   ","","","","","","","","","","","","","","","","","","","","","","","","","","","","// set up visualizer template","const baseStyle = `","<style>","body {","    background-color: #FF6C38;","}",".container {","    background-color: #FFF;","    border-radius: 8px;","    border: 2px solid #FF6C38;","    padding: 2rem;","    max-width: 675px;","    margin: 2rem auto;","}","",".show-on-send {","    display: none;","}","</style>","`","","// requires var 'workshopCode'","const testsPassedTemplate = `","${baseStyle}","<div class=\"container\">","    <h3>All tests passed! 🚀</h3>","    <p>Congratulations! You've completed {{workshopCode}}. If you've registered for the classroom program, enter the <strong>same email you used in registration</strong> below to submit your progress to your teacher</p>","","    <form onsubmit=\"handleSubmit(event)\">","    <input type=\"email\" name=\"email\" placeholder=\"Enter your email\" required />","    <input type=\"submit\" id=\"submit-button\"/>","    </form>","","    <p class=\"show-on-send\"><em>Please hold. It may take up to a minute to submit your data</em></p>","</div>","","<script>","const submitUrl = \"https://classroom-program-student-work-submit-prod.glitch.me/submit/{{workshopCode}}\"","","const submitButton = document.getElementById('submit-button');","const showOnSend = document.querySelector('.show-on-send');","const container = document.querySelector('.container');","","// attempt to send student data to progress monitor","async function handleSubmit(e) {","    e.preventDefault();","    enableSendingUI();","","    const studentEmail = e.target.elements.email.value;","    const data = {","        studentEmail","    }","","    try {","        const opts = { ","           method: 'post',","           body: JSON.stringify(data),","           headers: {","            'Content-Type': 'application/json'","           }","        }","","        const res = await fetch(submitUrl, opts);","        if(res.ok) {","            displaySuccessMsg();","        } else {","            displayServerErrorMsg();","        }","    } catch(err) {","        console.error(err)","        displayServerErrorMsg();","    } finally {","        disableSendingUI();","    }","}; ","","function enableSendingUI() {","   submitButton.disabled = true;","   submitButton.value = \"Sending...\";","   showOnSend.style.display = \"block\";","}","","function disableSendingUI() {","   submitButton.disabled = false;","   submitButton.value = \"Submit\";","   showOnSend.style.display = \"none\";","}","","function displaySuccessMsg() {","    const template = \"<h3>Success! 🎉</h3><p>Your teacher will be able to see your progress. Please do not resubmit your progress again.</p><p>To remind yourself that you have submitted this module, add a collection variable to this collection called 'submitted' and set its value to 'true'</p>\"","    container.innerHTML = template","}","","function displayServerErrorMsg() {","    const template = \"<h3>Uh oh!</h3><p>Something went wrong when attempting to submit your progress. If the problem persists, contact <code>studentprogram@postman.com</code></p>\"","    container.innerHTML = template","}","</script>","`","","const testsFailedTemplate = `","${baseStyle}","<div class=\"container\">","    <h3>Not quite done 🚫</h3>","    <p>It looks like your work is still failing some tests. Check the <strong>Test Results</strong> tab for details on which tests are failing. Fix the errors and try submitting again!</p>","</div>","`","","if (passed === totalToPass) {","    console.log('All tests passed!')","    const workshopCode = 'API103'","    pm.visualizer.set(testsPassedTemplate, { workshopCode })","} else {","    pm.visualizer.set(testsFailedTemplate)","}","",""],"type":"text/javascript"}}],"id":"a2f49e6a-2d03-4216-bf38-90793021c836","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[{"key":"X-Api-Key","value":"{{postman-api-key}}","type":"text"}],"url":{"raw":"https://api.getpostman.com/collections/{{collectionId}}","protocol":"https","host":["api","getpostman","com"],"path":["collections","{{collectionId}}"]},"description":"## Before submitting\n\nEnsure that **all the tests pass** in the `check your app` folder!\n\n### Got Feedback?\nWe'd love to hear your feedback on the Classroom Program having come this far! Let us know [here](https://docs.google.com/forms/d/e/1FAIpQLScnRLQNB5L71AS8IyUnoUNW56Ppg9zM4s-Os8L1OkSyL_Kt0g/viewform)\n\n## Submitting your work\n\n[step-by-step video](https://www.loom.com/share/8b43484148ec49a5b5a8c2f0fcec646d)\n\n#### 1. **Save the collection ID as a collection variable**\nGet the collection ID for this collection by clicking on the collection folder (root folder), selecting the info icon `ⓘ` on the right and copying the ID.\n\nFrom the collection's \"Variables\" tab, replace the value `<replace this with this collection's id>` with the ID you got from the previous step, then **Save** the change.\n\n#### 2. **Add your Postman API key to the environment**\n*You will only need to do this step the first time you submit* \n\nIf you do not have a Postman API Key, generate one [here](https://go.postman.co/settings/me/api-keys). We will store this value as an **Environment variable** - environments allow us to share variables across multiple collections. [Create an environment](https://learning.postman.com/docs/sending-requests/managing-environments/#creating-environments) from the Environments tab and call it `my-info`. Add your Postman API key to your new environment as a variable named `postman-api-key`.\n> ⚠ When saving sensitive environment variables, remember to only use the CURRENT VALUE column\n\nMake sure you save your changes! You can use this environment for any future Postman Classroom Program workshops you complete. The `postman-api-key` variable is used in the `X-Api-Key` header of each `submit` request. \n\n\n#### 3. **Set 'my-info' environment to active**\nEnsure you environment is active by selecting it in the upper right. \n\nClick the 'eye' icon to the right to confirm there is a value present in your environment for `postman-api-key`\n\n![image](https://user-images.githubusercontent.com/9841162/124359041-35bb4a00-dbf1-11eb-8895-f9d7a0451c52.png)\n\n\n#### 4. **Check your work**\nSave your changes in the collection and environment. Hit **Send**. \n\n> If you get a `401 Unauthorized` response, carefully review steps 3 and 4 and make sure your Postman API key is correctly resolving.\n\nCheck the response. in the **Body** tab of the response, click **Visualize** to view your status.  \n\nIf any of the tests failed, you will see a \"Not quite done\" message like below. \n\n![image](https://user-images.githubusercontent.com/9841162/124359464-2a691e00-dbf3-11eb-9e90-7dd27db2bfd0.png)\n\nTo see which tests failed, open the **Test Results** tab of the response. Address the failed tests in your work and submit again.\n\n#### 5. **Submit your progress**\n*Only do this step if you are registered with the Postman Classroom Program!* \n\nIf all the tests pass, you will see a congratulations message.\n\n![image](https://user-images.githubusercontent.com/9841162/124359555-8e8be200-dbf3-11eb-8b0f-0ab6a6e1b232.png)\n\n\nIf (and only if!) you have registered for the Postman Classroom Program, you will need to submit **the same email address you used to register for the program** in the form that appears. Enter your email and hit \"Submit\". This will allow your teacher to monitor your progress!\n\nOnce your progress is submitted successfully, you are done with this module! Feel free to run the tests again whenever you like by running `submit` - but please to not re-submit your email for this module. \n\n### Troubleshooting: common errors when submitting\n\n*   **Make sure there is a value for** `collectionId` in your collection variables.\n*   **Make sure that value is your collection ID, NOT your request ID.** You can find your collection ID by clicking on your collection (top level folder), then checking the info `ⓘ` tab in the far right menu\n*   **Make sure there is no accidental white space** when you define you `collectionId` variable. That includes spaces and new lines. You can see a small gray arrow at the end of your value if there is a newline - simply delete the newline or space\n\n#### Going further \nGlitch is a powerful tool for prototyping. Keep exploring \n\n- Edit the style.css file to customize your app’s look and feel!\n\n\n- Add more features in your handlebars.js template, such as adding **album art** or **artist names** to the songs\n\n\n- Create your own new web app that interacts with an API by remixing the [postman-express-starter](https://glitch.com/edit/#!/postman-express-starter). What about a web app for using the [Library API](https://glitch.com/edit/#!/postman-library-api)? Debug your app with Postman!\n\n\n- ...Your idea here!"},"response":[]}],"id":"a486d067-8941-49a5-82fb-17811adcc254"}],"id":"db2b33fd-56a1-41c1-90a8-0725199a399a","description":"## Your Mission \n\nThe blogger is impressed with the [web app from the demo](https://glitch.com/edit/#!/spotify-song-recommender-complete?path=public%2Fscript.js%3A27%3A14) above, but wants more accurate song recommendations. \n\nThey've hired you to update the code to **accept 3 artists in the form and return 5 song recommendations** (just like the workflow you built before in API 102)! \n\nYou will need to modify `spotify/actions.js`, `server.js`, and `public/index.html`, and `public/script.js` to achieve this.\n\n> You will be extending an existing app for this challenge. In the real work world too, it is rare that you will start a project completely from scratch (known as a [greenfield project](https://en.wikipedia.org/wiki/Greenfield_project)). Like today's challenge, you will often join a team with an existing code base and need to add features to it.\n\n## Getting started \n1. Create a free [Glitch](https://glitch.com/) account if you don't have one\n\n2. Create a \"Remix\" (copy) of the [demo app](https://glitch.com/edit/#!/spotify-song-recommender-complete) by clicking the dropdown from the project title in the upper left, then **Remix Project**\n\n![image](https://user-images.githubusercontent.com/9841162/120941782-79499380-c6d9-11eb-94cc-6238418f8b1b.png)\n\n4.You can rename your new project if you like. Once you are satisfied, find your project's public base URL by clicking **Show** > **In a New Window**\n\n![image](https://user-images.githubusercontent.com/9841162/120943882-743f1100-c6e6-11eb-9905-3f0326a32f6e.png)\n\n5.From the new window, copy the full URL (including `https://`!). In Postman, navigate to your forked API 103 collection. Paste the URL as the INITIAL VALUE for the collection variable `YOUR_GLITCH_BASE_URL` \n\n6.Create a new Spotify app from the [Spotify dashboard](https://developer.spotify.com/dashboard/) to get a new `Client ID` and `Client Secret`. Add these as values for `SPOTIFY_CLIENT_ID` and `SPOTIFY_CLIENT_SECRET` in the `.env` file in your Glitch project. You do not need to add a callback URL to your Spotify app because we are using Client Credentials auth flow.\n\n7. In your new Glitch project, update the form in `index.html` to accept three artists, instead of a track and artist\n\n```\n<form id=\"search-form\" onsubmit=\"submitForm(event)\">\n        <input type=\"text\" name=\"artist1\" placeholder=\"enter artist 1\" required />\n        <input type=\"text\" name=\"artist2\" placeholder=\"enter artist 2\" required />\n        <input type=\"text\" name=\"artist3\" placeholder=\"enter artist 3\" required />\n        <input type=\"submit\" id=\"submitButton\" value=\"Get recommendations\" />\n      </form>\n```\n\n\n7.Update the code in `public/scripts.js`, `spotify/actions.js` and `server.js` so that the app **accepts three artists from the form and returns 5 song recommendations**. \n\nYour goal is to update the app so that the initial form looks like this: \n\n![image](https://user-images.githubusercontent.com/9841162/120941840-e65d2900-c6d9-11eb-9cd9-915da6fbbab9.png)\n\nAnd using it looks like this: \n\n![image](https://user-images.githubusercontent.com/9841162/120941923-46ec6600-c6da-11eb-83a6-49036df70e6e.png)\n\nVideo example of completed assignment: [here](https://www.loom.com/share/b4fd7711af5948409983d402fa23a926)\n\n## Hints \n- Use your completed workflow assignment from API 102 and Postman's [code generation feature](https://learning.postman.com/docs/sending-requests/generate-code-snippets/) for hints on how to structure your `axios` requests in `spotify/actions.js`. **If you do not have access to your 102 assignment**, feel free to download and import this example of the completed assignment: [here](https://drive.google.com/file/d/1eROQikqJqSexQ0Z2tCRoywNfR2nKg1BW/view?usp=sharing)\n- Check your progress along the way with the requests in the `check your work` folder below\n\n## Submitting your work\n\nOnce you've finished mission and all the tests pass in `check your work`, follow the instructions on the `submit` folder\n\n## Need help?\n\nIf you get stuck, search the [Postman forums](https://community.postman.com/) or post a new topic in the [Training category](https://community.postman.com/c/training/38) if you don't see your question. Also, see these [general troubleshooting tips](https://community.postman.com/t/general-troubleshooting-tips/30667).\n\n## Join us on Discord!  \nJoin the Postman Student Community Discord server for fun events and getting Postman help from other students and Postman team members! [Join here](https://discord.gg/ndTKxHy2CF)"}],"event":[{"listen":"prerequest","script":{"id":"5e4a312e-23cd-441b-b0c3-d89b697fc472","type":"text/javascript","exec":[""]}},{"listen":"test","script":{"id":"740bb013-b4bb-40f2-86e7-3755c7b27d5a","type":"text/javascript","exec":[""]}}],"variable":[{"id":"267ac231-88a8-4149-970f-805f6612992f","key":"YOUR_GLITCH_BASE_URL","value":""},{"id":"5da0a172-8060-4eeb-a4f5-6dae525e72c7","key":"collectionId","value":""}]}